source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
init.x
length(init.x)
ebola
der
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
init.x
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
x.init
init.x
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
init.x
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/FA6D6E55-8771-4B6C-919F-D69EB2F069C3/hiv2script.R', echo=TRUE)
simlength <- 20
out <- n.integrate(start=0,end=simlength,init.x=init.x,model=hiv)
attach(out)  # this allows us to refer to data columns in out directly
# Plot time course
plot(c(0,simlength),c(0,T0),type="n",main="Initial infection",xlab="time (days)",ylab="")
lines(time,rep(0,length(time)),col="grey",lwd=1,lty=2) # This command draws a line with f(t)=0 to better observe if a population converges against 0, i.e. if the population will go extinct
lines(time,T,lwd=2)
lines(time,I,col="red",lwd=2)
legend(simlength*0.7,T0*0.8,c("T","I"),lwd=c(2,2),col=c("black","red"))
# save endpoint and remove out from search path
init.x <- c(T=T[length(T)],I=I[length(I)])  # save endpoint into init.x (this command saves the value at the steady-state as the initial value for analyzing the model under drug treatment)
detach(out)
####################################################
### PART II
### Simulation of drug treatment with no resistance
# weak drug
eps=0.5
out <- n.integrate(start=0,end=simlength,init.x=init.x,model=hiv)
attach(out)  # this allows us to refer to data columns in out directly
plot(c(0,simlength),c(0,T0),type="n",main="Treatment with weak drug",xlab="time (days)",ylab="")
lines(time,rep(0,length(time)),col="grey",lwd=1,lty=2) # This command draws a line with f(t)=0 to better observe if a population converges against 0, i.e. if the population will go extinct
lines(time,T,lwd=2)
lines(time,I,col="red",lwd=2)
legend(simlength*0.7,T0*0.6,c("T","I"),lwd=c(2,2),col=c("black","red"))
detach(out)
# strong drug
eps=0.9
out <- n.integrate(start=0,end=simlength,init.x=init.x,model=hiv)
# Plot time course
attach(out)  # this allows us to refer to data columns in out directly
plot(c(0,simlength),c(0,T0),type="n",main="Treatment with strong drug",xlab="time (days)",ylab="")
lines(time,rep(0,length(time)),col="grey",lwd=1,lty=2) # This command draws a line with f(t)=0 to better observe if a population converges against 0, i.e. if the population will go extinct
lines(time,T,lwd=2)
lines(time,I,col="red",lwd=2)
legend(simlength*0.7,T0*0.8,c("T","I"),lwd=c(2,2),col=c("black","red"))
detach(out)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
dim(out)
out[1:10,]
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
dim(E)
E
length(E)
E[1001]
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
E[length(E)]
c(0,E[length(E)])
E
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
###########################
### LOAD LIBRARIES
#load R library for ordinary differential equation solvers
if (!require("deSolve"))
{
install.packages("deSolve", dependencies = TRUE)
library(deSolve)
}
### INITIALIZE PARAMETER SETTINGS
## Model parameters (defined on the time scale of days)
#  I define parameters globally to be able to change them between runs easily
sigma=10 #all params are per day
d=0.01
d_I = 0.1
d_E = 0.1
d_V = 3
p = 100
b=0.01
k = 1
alpha = 2
parms <- c() # dummy-variable needed for lsoda
# Initial conditions (i.e. the values of all variables at time = start)
I0 <- 0   # to model initial infection
T0 <- sigma/d   # to start from uninfected steady state
E0 <- 0.1
V0 <- 1
init.x <- c(T=T0, I=I0, V=V0, E=E0)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
out
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
source('~/Documents/Ebola/sGPModel/sGP_dynamics.R', echo=TRUE)
